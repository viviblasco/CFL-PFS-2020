"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Column_1 = __importDefault(require("./Column"));
class ColumnExtractor {
    constructor(object) {
        this.columnObject = {};
        this.columns = [];
        this.getColumnsFor(object);
        this.makeColumnsFromColumnObject();
    }
    getColumns() {
        return this.columns;
    }
    makeColumnsFromColumnObject() {
        Object.keys(this.columnObject).forEach(key => this.columns.push(new Column_1.default(key, this.columnObject[key])));
    }
    getColumnsFor(object) {
        const objectFieldKey = this.getObjectFieldKey(object);
        Object.keys(object).forEach(key => this.handleObjectKeys(key, objectFieldKey, object));
    }
    handleObjectKeys(key, objectFieldKey, object) {
        if (key !== objectFieldKey)
            this.addToColumnsForNonObjectFields(key, object);
        else
            object[objectFieldKey].forEach((obj) => this.getColumnsFor(obj));
    }
    addToColumnsForNonObjectFields(key, object) {
        if (!this.columnObject[key])
            this.columnObject[key] = [];
        this.columnObject[key].push(object[key].toString());
        if (!this.getObjectFieldKey(object))
            return;
        const numberOfNulls = this.numberOfChildObjects(object);
        for (let i = 1; i < numberOfNulls; i++)
            this.columnObject[key].push("");
    }
    numberOfChildObjects(object) {
        let objectFieldKey = this.getObjectFieldKey(object);
        let depth = 1;
        while (objectFieldKey) {
            depth *= object[objectFieldKey].length;
            object = object[objectFieldKey][0];
            objectFieldKey = this.getObjectFieldKey(object);
        }
        return depth;
    }
    getObjectFieldKey(object) {
        return Object.keys(object).find((key) => typeof object[key] === "object");
    }
}
exports.default = ColumnExtractor;
